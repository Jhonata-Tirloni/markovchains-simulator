print("Tudo certo meu brother")
plot(x, y, main="Gráfico Simples", xlab="Eixo X", ylab="Eixo y")
x <- c(1, 2, 3, 4, 5)
y <- xˆ2
x <- c(1, 2, 3, 4, 5)
y <- x ˆ 2
x <- c(1, 2, 3, 4, 5)
y <- x**2
plot(x, y, main="Gráfico Simples", xlab="Eixo X", ylab="Eixo y")
clear
install.packages(c("tidyverse", "ggplot2", "dplyr", "shiny"))
x <- TRUE
y <- c(TRUE, FALSE, TRUE)
print(x | y)
x <- TRUE
y <- c(TRUE, FALSE, TRUE)
print(x & y)
x <- TRUE
y <- c(TRUE, FALSE, TRUE)
print(x && y)
x <- TRUE
y <- c(TRUE)
print(x && y)
x <- TRUE
y <- c(TRUE, FALSE, TRUE)
print(x && y[1])
x <- TRUE
y <- c(TRUE, FALSE, TRUE)
print(x && y[2])
x <- TRUE
y <- c(TRUE, FALSE, TRUE)
print(x & y[2])
x <- TRUE
y <- c(TRUE, FALSE, TRUE)
print(x && y[2])
dados <- data.frame(
nome = c("Jhonata", "Tirloni", "Giuseppe", "Giusti"),
idade = c(26, 26, 35, 48),
altura = c(1.83, 1.85, 1.78, 1.70),
ativo = c(TRUE, TRUE, FALSE, FALSE)
)
print(dados)
dados$nome
dados[[nome]]
dados[['nome']]
dados$c(nome, idade)
dados[[, c('nome', 'idade')]]
dados[, c('nome', 'idade')]
dados[dados$idade > 25, ]
dados[dados$idade <= 26, ]
dados$altura <- null
dados$altura <- NULL
print(dados)
summary(dados)
str(dados)
dim(dados)
colnames(dados)
clear
cls
clear()
install.packages('readxl')
install.packages('writexl')
install.packages('jsonlite')
library(ggplot2)
# Exemplo básico
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", col = "red") +
labs(title = "Peso vs Consumo de Combustível", x = "Peso", y = "Milhas por Galão")
install.packages("R6")
install.packages("R6")
library(R6)
# Definir uma classe R6
Pessoa <- R6Class(
"Pessoa",
public = list(
nome = NULL,
idade = NULL,
initialize = function(nome, idade) {
self$nome <- nome
self$idade <- idade
},
saudacao = function() {
cat("Olá, meu nome é", self$nome, "e tenho", self$idade, "anos.\n")
}
)
)
# Criar um objeto
p <- Pessoa$new(nome = "Carlos", idade = 40)
# Usar o método
p$saudacao()
library(R6)
# Definir uma classe R6
Pessoa <- R6Class(
"Pessoa",
public = list(
nome = NULL,
idade = NULL,
initialize = function(nome, idade) {
self$nome <- nome
self$idade <- idade
},
saudacao = function() {
return cat("Olá, meu nome é", self$nome, "e tenho", self$idade, "anos.\n")
library(R6)
# Definir uma classe R6
Pessoa <- R6Class(
"Pessoa",
public = list(
nome = NULL,
idade = NULL,
initialize = function(nome, idade) {
self$nome <- nome
self$idade <- idade
},
saudacao = function() {
cat("Olá, meu nome é", self$nome, "e tenho", self$idade, "anos.\n")
}
)
)
# Criar um objeto
p <- Pessoa$new(nome = "Carlos", idade = 40)
# Usar o método
p$saudacao()
edit(anorexia)
edit(cars)
install.packages("xquarts")
edit(cars)
dados <- c(10, 20, 20, 30, 40, 50)
media <- mean(dados)    # Média
mediana <- median(dados) # Mediana
moda <- names(sort(table(dados), decreasing = TRUE))[1]  # Moda
list(Media = media, Mediana = mediana, Moda = moda)
library(e1071)  # Para função skewness
install.packages("e1071")
library(e1071)  # Para função skewness
assimetria <- skewness(dados)
list(Assimetria = assimetria)
library(e1071)  # Para função skewness
assimetria <- skewness(dados)
list(Assimetria = assimetria)
amplitude <- max(dados) - min(dados)     # Amplitude
variancia <- var(dados)                 # Variância
desvio_padrao <- sd(dados)              # Desvio padrão
cv <- (desvio_padrao / mean(dados)) * 100 # Coeficiente de variação
list(Amplitude = amplitude, Variancia = variancia, Desvio_Padrao = desvio_padrao, CV = cv)
par(mfrow = c(2, 2))  # Dividir tela em 2x2
# Histograma para visualizar assimetria e curtose
hist(dados, main = "Histograma", col = "skyblue", border = "white", xlab = "Valores")
# Boxplot para identificar posição (mediana) e dispersão (amplitude interquartil)
boxplot(dados, main = "Boxplot", col = "lightgreen", horizontal = TRUE)
# Média e mediana sobrepostos ao histograma
plot(density(dados), main = "Densidade", col = "blue")
abline(v = mean(dados), col = "red", lwd = 2, lty = 2)  # Média
abline(v = median(dados), col = "green", lwd = 2, lty = 2)  # Mediana
# Variabilidade e posição
stripchart(dados, method = "jitter", main = "Dispersão dos Dados", pch = 16, col = "purple")
# Conjunto de dados
dados <- c(50, 60, 70, 80, 90, 100, 150)
# Medidas de posição
media <- mean(dados)
mediana <- median(dados)
moda <- names(sort(table(dados), decreasing = TRUE))[1]
# Medidas de dispersão
variancia <- var(dados)
desvio_padrao <- sd(dados)
amplitude <- max(dados) - min(dados)
# Assimetria e curtose
library(e1071)
assimetria <- skewness(dados)
curtose <- kurtosis(dados)
# Exibir resultados
list(
Media = media,
Mediana = mediana,
Moda = moda,
Variancia = variancia,
Desvio_Padrao = desvio_padrao,
Amplitude = amplitude,
Assimetria = assimetria,
Curtose = curtose
)
# Dados de exemplo
genero <- c("Feminino", "Feminino", "Masculino", "Feminino", "Masculino", "Masculino")
sabor <- c("Chocolate", "Baunilha", "Chocolate", "Morango", "Baunilha", "Chocolate")
# Criando tabela de contingência
tabela <- table(genero, sabor)
# Exibindo a tabela
print(tabela)
# Frequências relativas
tabela_relativa <- prop.table(tabela) * 100
print(tabela_relativa)
# Gráfico de barras agrupadas
barplot(tabela, beside = TRUE, col = c("skyblue", "pink"),
legend.text = TRUE, args.legend = list(title = "Gênero"),
xlab = "Sabores", ylab = "Frequência", main = "Preferência de Sabores por Gênero")
barplot(tabela, beside = FALSE, col = c("skyblue", "pink"),
legend.text = TRUE, args.legend = list(title = "Gênero"),
xlab = "Sabores", ylab = "Frequência", main = "Preferência de Sabores por Gênero")
# Gráfico de mosaico
mosaicplot(tabela, color = c("skyblue", "pink"),
main = "Gráfico de Mosaico: Preferência de Sabores por Gênero")
# Teste qui-quadrado
teste_qui2 <- chisq.test(tabela)
# Resultado do teste
print(teste_qui2)
install.packages("installr")
updateR
library(installr)
updateR()
detach("package:installr", unload = TRUE)
remove.packages("installr")
shiny::runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
install.packages("bslib")
shiny::runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
runApp('Library/CloudStorage/GoogleDrive-tirlonijhonata@gmail.com/My Drive/Mestrado/Dissertação/markov_chains/markov_chains')
setwd("/Users/jhonatatirloni/Library/Mobile\ Documents/com\~apple\~CloudDocs/Mestrado/Ciência\ de\ dados/markovchains-simulator")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Mestrado/Ciência de dados/markovchains-simulator")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
